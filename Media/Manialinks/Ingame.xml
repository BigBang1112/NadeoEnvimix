<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3">
<frame id="GhostState">
<frame pos="-150 80">
<label z-index="0" size="30 5" text="CanyonCar" textfont="RajdhaniMono" textemboss="1" id="Car"/>
<label pos="45 0" z-index="0" size="20 5" text="0:00.000" textfont="RajdhaniMono" textemboss="1" halign="right" id="Time"/>
<label pos="45 -5" z-index="0" size="20 5" text="CP1" textfont="RajdhaniMono" textemboss="1" halign="right" textsize="1" id="State"/>
</frame>
<frame pos="-150 70">
<label z-index="0" size="30 5" text="CanyonCar" textfont="RajdhaniMono" textemboss="1" id="Car"/>
<label pos="45 0" z-index="0" size="20 5" text="0:00.000" textfont="RajdhaniMono" textemboss="1" halign="right" id="Time"/>
<label pos="45 -5" z-index="0" size="20 5" text="CP1" textfont="RajdhaniMono" textemboss="1" halign="right" textsize="1" id="State"/>
</frame>
<frame pos="-150 60">
<label z-index="0" size="30 5" text="CanyonCar" textfont="RajdhaniMono" textemboss="1" id="Car"/>
<label pos="45 0" z-index="0" size="20 5" text="0:00.000" textfont="RajdhaniMono" textemboss="1" halign="right" id="Time"/>
<label pos="45 -5" z-index="0" size="20 5" text="CP1" textfont="RajdhaniMono" textemboss="1" halign="right" textsize="1" id="State"/>
</frame>
</frame>



<label pos="128 69.5" z-index="0" size="40 10" text="STADIUM" halign="right" textfont="RajdhaniMono" textsize="6" valign="bottom" id="LabelEnvironment" textemboss="1"/>
<label pos="150 80" z-index="0" size="20 10" text="A01" halign="right" textfont="RajdhaniMono" textsize="10" id="LabelMap" textemboss="1"/>
<label pos="148.5 69" z-index="0" size="30 5" text="VALLEYCAR" textfont="RajdhaniMono" halign="right" id="LabelCar" textemboss="1"/>
<label pos="148.5 60" z-index="0" size="20 5" text="0:00.000" textfont="RajdhaniMono" textemboss="1" halign="right" id="MyTime" valign="center2"/>
<label pos="150 60" z-index="0" size="10 5" text="CP1" textfont="RajdhaniMono" textemboss="1" halign="left" textsize="1" id="MyState" valign="center2"/>

<script>
	<!--
		#Include "TextLib" as TextLib
		#Include "MathLib" as MathLib
		#Include "AnimLib" as AnimLib
		
		declare SoundHover = Audio.CreateSound("file://Media/Sounds/Hover.ogg");
		declare SoundClick = Audio.CreateSound("file://Media/Sounds/Click.ogg");
		declare SoundElectric = Audio.CreateSound("file://Media/Sounds/Electric.ogg");
		
		declare Frame <=> (Page.GetFirstChild("GhostState") as CMlFrame);
		
		foreach(FrameCar,Frame.Controls) FrameCar.Hide();
		
		declare Integer[] CheckpointCounters;
		declare Integer LastStart;
		
		declare netread Integer Net_NEM_Start for UI;
		declare netread Text[] Net_NEM_GhostCars for UI;
		declare netread Integer[] Net_NEM_GhostTimes for UI;
		declare netread Integer[][] Net_NEM_GhostCheckpoints for UI;
		
		
		
		declare netread Text Net_Environment for UI;
		(Page.GetFirstChild("LabelEnvironment") as CMlLabel).SetText(Net_Environment);
		declare netread Text Net_Map for UI;
		(Page.GetFirstChild("LabelMap") as CMlLabel).SetText(Net_Map);
		declare netread Text Net_NEM_Car for UI;
		(Page.GetFirstChild("LabelCar") as CMlLabel).SetText(Net_NEM_Car);
		
		while(True) {
			declare persistent Integer PERSISTENT_NEM_TOKEN_TIME for LocalUser;
			log("Token skončí za " ^ (PERSISTENT_NEM_TOKEN_TIME - CurrentTime)/1000 ^ " sekund");
		
			if(Net_NEM_Start != LastStart) {
				LastStart = Net_NEM_Start;
				
				CheckpointCounters.clear();
				
				for(i,0,Net_NEM_GhostCars.count - 1) {
					((Frame.Controls[i] as CMlFrame).GetFirstChild("Car") as CMlLabel).SetText(Net_NEM_GhostCars[i]);
					Frame.Controls[i].Show();
					
					CheckpointCounters.add(0);
				}
				
				declare netwrite Boolean Net_NEM_Continue for UI;
				Net_NEM_Continue = False;
			}
		
			for(i,0,Net_NEM_GhostCars.count - 1) {
				if(CheckpointCounters[i] < Net_NEM_GhostCheckpoints[i].count && Net_NEM_Start + Net_NEM_GhostCheckpoints[i][CheckpointCounters[i]] < GameTime) {
					CheckpointCounters[i]+=1;
				}
				
				if(CheckpointCounters[i] > 0) {
					declare Tim = Net_NEM_GhostCheckpoints[i][CheckpointCounters[i]-1];
					((Frame.Controls[i] as CMlFrame).GetFirstChild("Time") as CMlLabel).SetText(TextLib::TimeToText(Tim,True)^TextLib::SubText(""^Tim,TextLib::Length(""^Tim)-1,1));
				}
			
				if(CheckpointCounters[i] == Net_NEM_GhostCheckpoints[i].count) {
					(Frame.Controls[i] as CMlFrame).GetFirstChild("State").Show();
					((Frame.Controls[i] as CMlFrame).GetFirstChild("State") as CMlLabel).SetText("FINISH");
					((Frame.Controls[i] as CMlFrame).GetFirstChild("State") as CMlLabel).TextColor = <1.0,0.25,0.25>;
				}
				else if(CheckpointCounters[i] == 0) {
					((Frame.Controls[i] as CMlFrame).GetFirstChild("Time") as CMlLabel).SetText("0:00.000");
					(Frame.Controls[i] as CMlFrame).GetFirstChild("State").Hide();
				}
				else {
					(Frame.Controls[i] as CMlFrame).GetFirstChild("State").Show();
					((Frame.Controls[i] as CMlFrame).GetFirstChild("State") as CMlLabel).SetText("CP"^(CheckpointCounters[i]));
					((Frame.Controls[i] as CMlFrame).GetFirstChild("State") as CMlLabel).TextColor = <0.5,0.75,1.0>;
				}
			}
		
			foreach(Event,RaceEvents) {
				switch(Event.Type) {
					case CTmRaceClientEvent::EType::WayPoint: {
						if(Event.IsEndRace) {
							
						}
						else if(Event.IsEndLap) {
							
						}
						else {
							(Page.GetFirstChild("MyTime") as CMlLabel).SetText(TextLib::TimeToText(Event.RaceTime,True)^TextLib::SubText(""^Event.RaceTime,TextLib::Length(""^Event.RaceTime)-1,1));
						}
					}
				}
			}
			
			foreach(Event,PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::KeyPress: {
						if(Event.KeyName == "M") {
							declare netwrite Text Net_State for UI;
							Net_State = "MENU";
						}
					}
					case CMlEvent::Type::MouseOver: {
						declare Frame <=> Event.Control.Parent;
					
						if(Event.ControlId == "button") {
							Audio.PlaySoundEvent(SoundHover, 1.0);
							Frame.DataAttributeSet("hover","true");
							Frame.DataAttributeSet("hover_time",Now^"");
							Frame.DataAttributeSet("hover_in_value",(Event.Control as CMlQuad).BgColor[0]^"");
						}
					}
					case CMlEvent::Type::MouseOut: {
						declare Frame <=> Event.Control.Parent;
					
						if(Event.ControlId == "button") {
							Frame.DataAttributeSet("hover","false");
							Frame.DataAttributeSet("hover_time",Now^"");
							Frame.DataAttributeSet("hover_out_value",(Event.Control as CMlQuad).BgColor[0]^"");
						}
					}
					case CMlScriptEvent::Type::MouseClick: {
						if(Event.ControlId == "button") {
							declare netwrite Text Net_State for UI;
							Net_State = "MENU";
						}
					}
				}
			}
			
			yield;
		}
	-->
</script>
</manialink>