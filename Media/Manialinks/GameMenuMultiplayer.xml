<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<manialink version="3">
<quad pos="0 0" z-index="0" size="270 100" bgcolor="000A" halign="center" valign="center" style="Bgs1" substyle="BgDialogBlur"/>
<frame z-index="1" id="selection">
<frame pos="-130 45" id="SelectionCanyon">
	<quad size="50 90" bgcolor="888A" image="file://Media/CanyonSelect.jpg"/>
	<quad size="50 90" bgcolor="FFFA" scriptevents="1" z-index="2" id="button"/>
	<quad pos="25 -2" z-index="3" size="45 10" bgcolor="000A" halign="center"/>
	<label pos="25 -5" z-index="4" size="45 5" text="Canyon Car" halign="center" style="TextTitle3" textsize="3"/>
	<quad pos="45 -5" z-index="5" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="BgRaceScore2" substyle="Fame" id="Star" hidden="1"/>
	<label pos="25 -61" z-index="1" size="40 5" text="$nVALIDATED BY" halign="center" textfont="RajdhaniMono" textsize="2" id="ValidatedBy" hidden="1"/>
	<label pos="25 -65" z-index="1" size="40 5" text="kokos" halign="center" id="Validator" textsize="1" hidden="1"/>
	<label pos="25 -72" z-index="1" size="50 5" text="Difficulty" style="TextTitle3" valign="center" halign="center" textsize="1"/>
	<gauge pos="25 -75" z-index="1" size="45 10" ratio="0" drawbg="0" style="EnergyBar" halign="center" valign="center" id="Difficulty"/>
	<label pos="25 -82" z-index="1" size="50 5" text="Quality" style="TextTitle3" valign="center" halign="center" textsize="1"/>
	<gauge pos="25 -85" z-index="1" size="45 10" ratio="0" drawbg="0" style="EnergyBar" halign="center" valign="center" id="Quality"/>
	
	<frame id="Default" z-index="3" hidden="1">
		<quad pos="0 0" size="50 90" bgcolor="000A" scriptevents="1"/>
		<label pos="25 -46.5" z-index="1" size="40 20" text="Original maps are unplayable" halign="center" valign="center2" style="TextTitle3" autonewline="1"/>
	</frame>
</frame>
<frame pos="-80 45" id="SelectionStadium">
	<quad size="50 90" bgcolor="888A" image="file://Media/StadiumSelect.jpg"/>
	<quad size="50 90" bgcolor="FFFA" scriptevents="1" z-index="2" id="button"/>
	<quad pos="25 -2" z-index="3" size="45 10" bgcolor="000A" halign="center"/>
	<label pos="25 -5" z-index="4" size="45 5" text="Stadium Car" halign="center" style="TextTitle3" textsize="3"/>
	<quad pos="45 -5" z-index="5" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="BgRaceScore2" substyle="Fame" id="Star" hidden="1"/>
	<label pos="25 -61" z-index="1" size="40 5" text="$nVALIDATED BY" halign="center" textfont="RajdhaniMono" textsize="2" id="ValidatedBy" hidden="1"/>
	<label pos="25 -65" z-index="1" size="40 5" text="kokos" halign="center" id="Validator" textsize="1" hidden="1"/>
	<label pos="25 -72" z-index="1" size="50 5" text="Difficulty" style="TextTitle3" valign="center" halign="center" textsize="1"/>
	<gauge pos="25 -75" z-index="1" size="45 10" ratio="0" drawbg="0" style="EnergyBar" halign="center" valign="center" id="Difficulty"/>
	<label pos="25 -82" z-index="1" size="50 5" text="Quality" style="TextTitle3" valign="center" halign="center" textsize="1"/>
	<gauge pos="25 -85" z-index="1" size="45 10" ratio="0" drawbg="0" style="EnergyBar" halign="center" valign="center" id="Quality"/>
	
	<frame id="Default" z-index="3" hidden="1">
		<quad pos="0 0" size="50 90" bgcolor="000A" scriptevents="1"/>
		<label pos="25 -46.5" z-index="1" size="40 20" text="Original maps are unplayable" halign="center" valign="center2" style="TextTitle3" autonewline="1"/>
	</frame>
</frame>
<frame pos="-30 45" id="SelectionValley">
	<quad size="50 90" bgcolor="888A" image="file://Media/ValleySelect.jpg"/>
	<quad size="50 90" bgcolor="FFFA" scriptevents="1" z-index="2" id="button"/>
	<quad pos="25 -2" z-index="3" size="45 10" bgcolor="000A" halign="center"/>
	<label pos="25 -5" z-index="4" size="45 5" text="Valley Car" halign="center" style="TextTitle3" textsize="3"/>
	<quad pos="45 -5" z-index="5" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="BgRaceScore2" substyle="Fame" id="Star" hidden="1"/>
	<label pos="25 -61" z-index="1" size="40 5" text="$nVALIDATED BY" halign="center" textfont="RajdhaniMono" textsize="2" id="ValidatedBy" hidden="1"/>
	<label pos="25 -65" z-index="1" size="40 5" text="kokos" halign="center" id="Validator" textsize="1" hidden="1"/>
	<label pos="25 -72" z-index="1" size="50 5" text="Difficulty" style="TextTitle3" valign="center" halign="center" textsize="1"/>
	<gauge pos="25 -75" z-index="1" size="45 10" ratio="0" drawbg="0" style="EnergyBar" halign="center" valign="center" id="Difficulty"/>
	<label pos="25 -82" z-index="1" size="50 5" text="Quality" style="TextTitle3" valign="center" halign="center" textsize="1"/>
	<gauge pos="25 -85" z-index="1" size="45 10" ratio="0" drawbg="0" style="EnergyBar" halign="center" valign="center" id="Quality"/>
	
	<frame id="Default" z-index="3" hidden="1">
		<quad pos="0 0" size="50 90" bgcolor="000A" scriptevents="1"/>
		<label pos="25 -46.5" z-index="1" size="40 20" text="Original maps are unplayable" halign="center" valign="center2" style="TextTitle3" autonewline="1"/>
	</frame>
</frame>
<frame pos="20 45" id="SelectionLagoon">
	<quad size="50 90" bgcolor="888A" image="file://Media/LagoonSelect.jpg"/>
	<quad size="50 90" bgcolor="FFFA" scriptevents="1" z-index="2" id="button"/>
	<quad pos="25 -2" z-index="3" size="45 10" bgcolor="000A" halign="center"/>
	<label pos="25 -5" z-index="4" size="45 5" text="Lagoon Car" halign="center" style="TextTitle3" textsize="3"/>
	<quad pos="45 -5" z-index="5" size="10 10" bgcolor="FFFA" halign="center" valign="center" style="BgRaceScore2" substyle="Fame" id="Star" hidden="1"/>
	<label pos="25 -61" z-index="1" size="40 5" text="$nVALIDATED BY" halign="center" textfont="RajdhaniMono" textsize="2" id="ValidatedBy" hidden="1"/>
	<label pos="25 -65" z-index="1" size="40 5" text="kokos" halign="center" id="Validator" textsize="1" hidden="1"/>
	<label pos="25 -72" z-index="1" size="50 5" text="Difficulty" style="TextTitle3" valign="center" halign="center" textsize="1"/>
	<gauge pos="25 -75" z-index="1" size="45 10" ratio="0" drawbg="0" style="EnergyBar" halign="center" valign="center" id="Difficulty"/>
	<label pos="25 -82" z-index="1" size="50 5" text="Quality" style="TextTitle3" valign="center" halign="center" textsize="1"/>
	<gauge pos="25 -85" z-index="1" size="45 10" ratio="0" drawbg="0" style="EnergyBar" halign="center" valign="center" id="Quality"/>
	
	<frame id="Default" z-index="3" hidden="1">
		<quad pos="0 0" size="50 90" bgcolor="000A" scriptevents="1"/>
		<label pos="25 -46.5" z-index="1" size="40 20" text="Original maps are unplayable" halign="center" valign="center2" style="TextTitle3" autonewline="1"/>
	</frame>
</frame>
</frame>

<quad pos="75 45" z-index="1" size="3 90" bgcolor="000A" halign="center"/>
<frame hidden="1" z-index="1">
	<quad pos="80 45" z-index="1" size="50 65" bgcolor="000A"/>
	<label pos="105 40" z-index="2" size="50 5" text="Custom car" autonewline="1" style="TextTitle3" textsize="2.5" halign="center"/>
</frame>
<frame id="buttons" z-index="2">
<frame pos="105 40" id="buttonResume">
	<quad pos="0 0" z-index="0" size="50 10" bgcolor="000F" halign="center" valign="center" scriptevents="1" id="button"/>
	<label size="45 5" text="Resume" style="TextTitle3" halign="center" valign="center2" z-index="1" id="text"/>
</frame>
<frame pos="105 -28" id="buttonSpectate">
	<quad pos="0 0" z-index="0" size="50 10" bgcolor="000F" halign="center" valign="center" scriptevents="1" id="button"/>
	<label size="30 5" text="Spectate" style="TextTitle3" halign="center" valign="center2" z-index="1" id="text"/>
</frame>
<frame pos="105 -40" id="buttonExit">
	<quad pos="0 0" z-index="0" size="50 10" bgcolor="000F" halign="center" valign="center" scriptevents="1" id="button"/>
	<label size="30 5" text="Exit" style="TextTitle3" halign="center" valign="center2" z-index="1" id="text"/>
</frame>
</frame>
<script>
	<!--
		#Include "TextLib" as TextLib
		#Include "MathLib" as MathLib
		#Include "AnimLib" as AnimLib
		
		declare SoundHover = Audio.CreateSound("file://Media/Sounds/Hover.ogg");
		declare SoundClick = Audio.CreateSound("file://Media/Sounds/Click.ogg");
		declare SoundElectric = Audio.CreateSound("file://Media/Sounds/Electric.ogg");
		
		declare CHttpRequest MapRequest;
		
		declare persistent Text[] NEM_CustomCars for LocalUser;
		
		if(NEM_CustomCars.count == 0) {
			for(i,0,4) {
				NEM_CustomCars.add("");
			}
		}
		
		declare netwrite Text[] Net_NEM_ResumeInfo for UI;
		Net_NEM_ResumeInfo = [""];
		
		declare TimerRequest = Now - 10000;
		
		while(True) {
			if(TimerRequest < Now - 10000) {
				MapRequest = Http.CreateGet("http://trackmania.bigbang1112.eu/nadeoenvimix/api/map_info.php?uid=" ^ Map.MapInfo.MapUid);
			
				TimerRequest = Now;
			}
		
			if(MapRequest != Null) {
				if(MapRequest.IsCompleted) {
					if(MapRequest.StatusCode == 200) {
						declare Doc = Xml.Create(MapRequest.Result);
						
						declare DifficultyCanyon = TextLib::ToReal(Doc.Root.GetFirstChild("CanyonCar").GetFirstChild("Difficulty").TextContents);
						if(DifficultyCanyon != -1)
							((Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("Difficulty") as CMlGauge).SetRatio(DifficultyCanyon);
						
						declare DifficultyStadium = TextLib::ToReal(Doc.Root.GetFirstChild("StadiumCar").GetFirstChild("Difficulty").TextContents);
						if(DifficultyStadium != -1)
							((Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("Difficulty") as CMlGauge).SetRatio(DifficultyStadium);
						
						declare DifficultyValley = TextLib::ToReal(Doc.Root.GetFirstChild("ValleyCar").GetFirstChild("Difficulty").TextContents);
						if(DifficultyValley != -1)
							((Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("Difficulty") as CMlGauge).SetRatio(DifficultyValley);
						
						declare DifficultyLagoon = TextLib::ToReal(Doc.Root.GetFirstChild("LagoonCar").GetFirstChild("Difficulty").TextContents);
						if(DifficultyLagoon != -1)
							((Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("Difficulty") as CMlGauge).SetRatio(DifficultyLagoon);
						
						
						declare QualityCanyon = TextLib::ToReal(Doc.Root.GetFirstChild("CanyonCar").GetFirstChild("Quality").TextContents);
						if(QualityCanyon != -1)
							((Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("Quality") as CMlGauge).SetRatio(QualityCanyon);
						
						declare QualityStadium = TextLib::ToReal(Doc.Root.GetFirstChild("StadiumCar").GetFirstChild("Quality").TextContents);
						if(QualityStadium != -1)
							((Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("Quality") as CMlGauge).SetRatio(QualityStadium);
						
						declare QualityValley = TextLib::ToReal(Doc.Root.GetFirstChild("ValleyCar").GetFirstChild("Quality").TextContents);
						if(QualityValley != -1)
							((Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("Quality") as CMlGauge).SetRatio(QualityValley);
						
						declare QualityLagoon = TextLib::ToReal(Doc.Root.GetFirstChild("LagoonCar").GetFirstChild("Quality").TextContents);
						if(QualityLagoon != -1)
							((Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("Quality") as CMlGauge).SetRatio(QualityLagoon);
						
						if(Doc.Root.GetFirstChild("CanyonCar").GetAttributeInteger("Marked",0) == 1)
							(Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("Star").Show();
						else
							(Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("Star").Hide();
							
						if(Doc.Root.GetFirstChild("StadiumCar").GetAttributeInteger("Marked",0) == 1)
							(Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("Star").Show();
						else
							(Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("Star").Hide();
						
						if(Doc.Root.GetFirstChild("ValleyCar").GetAttributeInteger("Marked",0) == 1)
							(Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("Star").Show();
						else
							(Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("Star").Hide();
							
						if(Doc.Root.GetFirstChild("LagoonCar").GetAttributeInteger("Marked",0) == 1)
							(Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("Star").Show();
						else
							(Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("Star").Hide();
							
						if(Doc.Root.GetFirstChild("CanyonCar").GetAttributeText("Validator","") != "") {
							((Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("Validator") as CMlLabel).SetText(Doc.Root.GetFirstChild("CanyonCar").GetAttributeText("Validator",""));
							(Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("ValidatedBy").Show();
							(Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("Validator").Show();
						}
							
						if(Doc.Root.GetFirstChild("StadiumCar").GetAttributeText("Validator","") != "") {
							((Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("Validator") as CMlLabel).SetText(Doc.Root.GetFirstChild("StadiumCar").GetAttributeText("Validator",""));
							(Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("ValidatedBy").Show();
							(Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("Validator").Show();
						}
							
						if(Doc.Root.GetFirstChild("ValleyCar").GetAttributeText("Validator","") != "") {
							((Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("Validator") as CMlLabel).SetText(Doc.Root.GetFirstChild("ValleyCar").GetAttributeText("Validator",""));
							(Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("ValidatedBy").Show();
							(Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("Validator").Show();
						}
						if(Doc.Root.GetFirstChild("LagoonCar").GetAttributeText("Validator","") != "") {
							((Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("Validator") as CMlLabel).SetText(Doc.Root.GetFirstChild("LagoonCar").GetAttributeText("Validator",""));
							(Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("ValidatedBy").Show();
							(Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("Validator").Show();
							
						}

						Xml.Destroy(Doc);
					}
					else {
						
					}
					
					Http.Destroy(MapRequest);
					MapRequest = Null;
				}
			}
			
			declare netread Text Net_MapCar for UI;
			
			switch(Net_MapCar) {
				case "CanyonCar": {
					(Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("Default").Show();
					(Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("Validator").Hide();
					(Page.GetFirstChild("SelectionCanyon") as CMlFrame).GetFirstChild("ValidatedBy").Hide();
				}
				case "StadiumCar": {
					(Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("Default").Show();
					(Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("Validator").Hide();
					(Page.GetFirstChild("SelectionStadium") as CMlFrame).GetFirstChild("ValidatedBy").Hide();
				}
				case "ValleyCar": {
					(Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("Default").Show();
					(Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("Validator").Hide();
					(Page.GetFirstChild("SelectionValley") as CMlFrame).GetFirstChild("ValidatedBy").Hide();
				}
				case "LagoonCar": {
					(Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("Default").Show();
					(Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("Validator").Hide();
					(Page.GetFirstChild("SelectionLagoon") as CMlFrame).GetFirstChild("ValidatedBy").Hide();
				}
			}
		
			foreach(Car,(Page.GetFirstChild("selection") as CMlFrame).Controls) {
				declare Time = TextLib::ToInteger(Car.DataAttributeGet("hover_time"));
				declare Value = AnimLib::EaseOutCubic(Now - Time, 0.0, 1.0, 200);
				
				if(Car.DataAttributeGet("hover") == "true") {
					((Car as CMlFrame).GetFirstChild("button") as CMlQuad).Opacity = Value * .25;
				}
				else {
					((Car as CMlFrame).GetFirstChild("button") as CMlQuad).Opacity = .25 - Value * .25;
				}
			}
			
			foreach(Button,(Page.GetFirstChild("buttons") as CMlFrame).Controls) {
				declare B <=> (Button as CMlFrame);
				
				declare Time = TextLib::ToInteger(B.DataAttributeGet("hover_time"));
				declare Value = AnimLib::EaseOutCubic(Now - Time, 0.0, 1.0, 200);
				
				if(B.DataAttributeGet("hover") == "true") {
					(B.GetFirstChild("button") as CMlQuad).BgColor = <Value,Value,Value>;
					(B.GetFirstChild("text") as CMlLabel).TextColor = <1.0-Value,1.0-Value,1.0-Value>;
				}
				else {
					(B.GetFirstChild("button") as CMlQuad).BgColor = <1.0-Value,1.0-Value,1.0-Value>;
					(B.GetFirstChild("text") as CMlLabel).TextColor = <Value,Value,Value>;
				}
			}
			
			foreach(Event,PendingEvents) {
				switch(Event.Type) {
					case CMlEvent::Type::KeyPress: {
						
					}
					case CMlEvent::Type::MouseOver: {
						declare Frame <=> Event.Control.Parent;
					
						if(Event.ControlId == "button") {
							Audio.PlaySoundEvent(SoundHover, 1.0);
							Frame.DataAttributeSet("hover","true");
							Frame.DataAttributeSet("hover_time",Now^"");
							Frame.DataAttributeSet("hover_in_value",(Event.Control as CMlQuad).BgColor[0]^"");
						}
					}
					case CMlEvent::Type::MouseOut: {
						declare Frame <=> Event.Control.Parent;
					
						if(Event.ControlId == "button") {
							Frame.DataAttributeSet("hover","false");
							Frame.DataAttributeSet("hover_time",Now^"");
							Frame.DataAttributeSet("hover_out_value",(Event.Control as CMlQuad).BgColor[0]^"");
						}
					}
					case CMlScriptEvent::Type::MouseClick: {
						if(Event.Control.Parent.ControlId == "SelectionCanyon"
						|| Event.Control.Parent.ControlId == "SelectionStadium"
						|| Event.Control.Parent.ControlId == "SelectionValley"
						|| Event.Control.Parent.ControlId == "SelectionLagoon") {
						
							declare netwrite Text Net_Vehicle for UI;
							
							switch(Event.Control.Parent.ControlId) {
								case "SelectionCanyon": { Net_Vehicle = "CanyonCar"; }
								case "SelectionStadium": { Net_Vehicle = "StadiumCar"; }
								case "SelectionValley": { Net_Vehicle = "ValleyCar"; }
								case "SelectionLagoon": { Net_Vehicle = "LagoonCar"; }
							}
							
							Net_NEM_ResumeInfo = [Net_Vehicle];
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
						}
						
						if(Event.Control.Parent.ControlId == "buttonResume") {
							declare netwrite Text Net_Vehicle for UI;
							declare netwrite Text[] Net_NEM_ResumeInfo for UI;
							Net_NEM_ResumeInfo = [Net_Vehicle];
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
						}
						if(Event.Control.Parent.ControlId == "buttonSpectate") {
							RequestSpectatorClient(True);
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Resume);
						}
						if(Event.Control.Parent.ControlId == "buttonExit") {
							CloseInGameMenu(CMlScriptIngame::EInGameMenuResult::Quit);
						}
					}
				}
			}
			yield;
		}
	-->
</script>
</manialink>