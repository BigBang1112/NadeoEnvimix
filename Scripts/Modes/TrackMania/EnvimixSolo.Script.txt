#RequireContext CTmMode

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "TimeLib" as TimeLib

#Include "Libs/Nadeo/Layers2.Script.txt" as Layers2

declare Ident[Text] VehicleList;
declare Boolean Terminate;

Void Init() {
	wait(AllPlayers.count>0);

	declare persistent Text[] NEM_CustomCars for AllPlayers[0].User;

	ItemList_Begin();
	VehicleList["CanyonCar"] = ItemList_Add("CanyonCar");
	VehicleList["StadiumCar"] = ItemList_Add("StadiumCar");
	VehicleList["ValleyCar"] = ItemList_Add("ValleyCar");
	VehicleList["LagoonCar"] = ItemList_Add("LagoonCar");
	
	foreach(Car,NEM_CustomCars) {
		if(Car != "" && !VehicleList.existskey(Car)) VehicleList[Car] = ItemList_Add(Car);
	}
	
	ItemList_End();
	
	declare CHttpRequest ManialinkRequest = Http.CreateGet("file://Media/Manialinks/Selection.xml");
	wait(ManialinkRequest.IsCompleted);
	Layers2::Create("VehicleSelection",ManialinkRequest.Result);
	ManialinkRequest = Http.CreateGet("file://Media/Manialinks/Ingame.xml");
	wait(ManialinkRequest.IsCompleted);
	Layers2::Create("Ingame",ManialinkRequest.Result);
	Http.Destroy(ManialinkRequest);
	
	RequestLoadMap();
    wait(MapLoaded);
}

Boolean Start() {
    //CutOffTimeLimit = -1;

    UIManager.UIAll.OverlayHideChat = True;
    UIManager.UIAll.OverlayHidePosition = True;
    UIManager.UIAll.OverlayHideSpectatorControllers = True;
    UIManager.UIAll.OverlayHideBackground = True;
    UIManager.UIAll.OverlayHideCheckPointList = True;
    UIManager.UIAll.OverlayHideOpponentsInfo = True;
    UIManager.UIAll.OverlayHideRoundScores = True;
    UIManager.UIAll.OverlayHideEndMapLadderRecap = True;
    UIManager.UIAll.AltMenuNoDefaultScores = True;
    UIManager.UIAll.AltMenuNoCustomScores = True;
    UIManager.UIAll.OverlayHidePersonnalBestAndRank = True;

    UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
    UIManager.UIAll.SmallScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
	
	declare UI <=> UIManager.GetUI(AllPlayers[0]);
	
	UI.UISequence = CUIConfig::EUISequence::PlayersPresentation;
	
	Layers2::Attach("VehicleSelection",AllPlayers[0]);

    return True;
}

Void Event(CTmModeEvent _Event) {
    log(_Event.CommandName);
}

Void Loop() {
	declare Player <=> AllPlayers[0];
	declare UI <=> UIManager.GetUI(Player);
	
	declare netread Text Net_State for UI;
	
	switch(Net_State) {
		case "START": {
			if(PlayersWaiting.existskey(0)) {
				declare netread Text Net_Vehicle for UI;
				
				Player.ForceModelId = VehicleList[Net_Vehicle];
				Player.IsSpawned = True;
				Player.RaceStartTime = Now + 2500;
			
				Layers2::Detach("VehicleSelection",Player);
				Layers2::Attach("Ingame",Player);
				
				UI.UISequence = CUIConfig::EUISequence::None;
			}
		}
		case "SPECTATE": {
			Layers2::Detach("VehicleSelection",Player);
			Layers2::Attach("Ingame",Player);
			UI.UISequence = CUIConfig::EUISequence::None;
		}
		case "MENU": {
			if(PlayersRacing.existskey(0))
				UnspawnPlayer(Player);
				
			Layers2::Detach("Ingame",Player);
			Layers2::Attach("VehicleSelection",Player);
			UI.UISequence = CUIConfig::EUISequence::PlayersPresentation;
		}
		case "BACK": {
			Player.IsSpawned = False;
			
			Terminate = True;
		}
	}
}

main() {
    Init();
	Start();
	
	while(!ServerShutdownRequested && !Terminate) {
		Loop();
		
		foreach(Event, PendingEvents) {
			Event(Event);
		}

		yield;
	}

    UIManager.ResetAll();
}
