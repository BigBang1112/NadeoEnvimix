#RequireContext CTmMode

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "TimeLib" as TimeLib

#Include "Libs/Nadeo/Layers2.Script.txt" as Layers2
#Include "Libs/Nadeo/TrackMania/TM.Script.txt" as TM

#Setting S_Car ""

declare Ident[Text] VehicleList;
declare CTaskResult_Ghost[Text] GhostList;
declare Boolean Terminate;
declare Text[] ResumeInfo;

declare CGhost Ghost;
declare Text Vehicle;

declare CTaskResult SetRecordRequest;

declare Text LastVehicle;

declare Boolean Finished;
declare Text[] Zones;

declare Integer LastPB;

Void RefreshPersonalGhosts() {
	GhostList["CanyonCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"CanyonCar"^"2");
	GhostList["StadiumCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"StadiumCar"^"2");
	GhostList["ValleyCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"ValleyCar"^"2");
	GhostList["LagoonCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"LagoonCar"^"2");
	wait(!GhostList["CanyonCar"].IsProcessing);
	wait(!GhostList["StadiumCar"].IsProcessing);
	wait(!GhostList["ValleyCar"].IsProcessing);
	wait(!GhostList["LagoonCar"].IsProcessing);
}

Void RefreshPersonalRecords() {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	
	declare netwrite Integer[] Net_Records for UI;
	Net_Records.clear();
	Net_Records.add(ScoreMgr.Map_GetRecord(Player.Id, Map.MapInfo.MapUid, "CanyonCar"^"2"));
	Net_Records.add(ScoreMgr.Map_GetRecord(Player.Id, Map.MapInfo.MapUid, "StadiumCar"^"2"));
	Net_Records.add(ScoreMgr.Map_GetRecord(Player.Id, Map.MapInfo.MapUid, "ValleyCar"^"2"));
	Net_Records.add(ScoreMgr.Map_GetRecord(Player.Id, Map.MapInfo.MapUid, "LagoonCar"^"2"));
}

Void SpawnPlayer(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);
	
	Vehicle = ResumeInfo[0];
	
	_Player.ForceModelId = VehicleList[Vehicle];
	if(_Player.ForceModelId == VehicleList[MapPlayerModelName]) Terminate = True;
				
	RaceGhost_RemoveAll();
	RefreshPersonalGhosts();
	
	declare netwrite Integer Net_NEM_Start for UI;
	declare netwrite Text[] Net_NEM_GhostCars for UI;
	declare netwrite Integer[] Net_NEM_GhostTimes for UI;
	declare netwrite Integer[][] Net_NEM_GhostCheckpoints for UI;
	
	Net_NEM_Start = 0;
	Net_NEM_GhostCars.clear();
	Net_NEM_GhostTimes.clear();
	Net_NEM_GhostCheckpoints.clear();
	
	if(GhostList["CanyonCar"].Ghost != Null && ResumeInfo[1] == "True") {
		RaceGhost_Add(GhostList["CanyonCar"].Ghost, False);
		
		Net_NEM_GhostCars.add("CanyonCar");
		Net_NEM_GhostTimes.add(GhostList["CanyonCar"].Ghost.Result.Time);
		
		declare Integer[] CheckpointArray;
		for(i,0,GhostList["CanyonCar"].Ghost.Result.Checkpoints.count-1)
			CheckpointArray.add(GhostList["CanyonCar"].Ghost.Result.Checkpoints[i]);
		Net_NEM_GhostCheckpoints.add(CheckpointArray);
	}
	if(GhostList["StadiumCar"].Ghost != Null && ResumeInfo[2] == "True") {
		RaceGhost_Add(GhostList["StadiumCar"].Ghost, False);
		
		Net_NEM_GhostCars.add("StadiumCar");
		Net_NEM_GhostTimes.add(GhostList["StadiumCar"].Ghost.Result.Time);
		
		declare Integer[] CheckpointArray;
		for(i,0,GhostList["StadiumCar"].Ghost.Result.Checkpoints.count-1)
			CheckpointArray.add(GhostList["StadiumCar"].Ghost.Result.Checkpoints[i]);
		Net_NEM_GhostCheckpoints.add(CheckpointArray);
	}
	if(GhostList["ValleyCar"].Ghost != Null && ResumeInfo[3] == "True") {
		RaceGhost_Add(GhostList["ValleyCar"].Ghost, False);
		
		Net_NEM_GhostCars.add("ValleyCar");
		Net_NEM_GhostTimes.add(GhostList["ValleyCar"].Ghost.Result.Time);
		
		declare Integer[] CheckpointArray;
		for(i,0,GhostList["ValleyCar"].Ghost.Result.Checkpoints.count-1)
			CheckpointArray.add(GhostList["ValleyCar"].Ghost.Result.Checkpoints[i]);
		Net_NEM_GhostCheckpoints.add(CheckpointArray);
	}
	if(GhostList["LagoonCar"].Ghost != Null && ResumeInfo[4] == "True") {
		RaceGhost_Add(GhostList["LagoonCar"].Ghost, False);
		
		Net_NEM_GhostCars.add("LagoonCar");
		Net_NEM_GhostTimes.add(GhostList["LagoonCar"].Ghost.Result.Time);
		
		declare Integer[] CheckpointArray;
		for(i,0,GhostList["LagoonCar"].Ghost.Result.Checkpoints.count-1)
			CheckpointArray.add(GhostList["LagoonCar"].Ghost.Result.Checkpoints[i]);
		Net_NEM_GhostCheckpoints.add(CheckpointArray);
	}
	
	if(GhostList[Vehicle].Ghost != Null) {
		_Player.Score.BestRace = GhostList[Vehicle].Ghost.Result;
	}
	else _Player.Score.BestRace = Null;
	
	_Player.IsSpawned = True;
	_Player.RaceStartTime = Now+2500;
	
	UI.UISequence = CUIConfig::EUISequence::Playing;
	
	Net_NEM_Start = _Player.RaceStartTime;
	
	declare netwrite Text Net_NEM_Car for UI;
	Net_NEM_Car = Vehicle;

	Layers2::Attach("Ingame",_Player);
}

Void Init() {
	wait(Players.count>0);
	
	declare Player <=> Players[0];

	declare persistent Text[] NEM_CustomCars for Player.User;

	declare persistent Text[Text] PERSISTENT_NEM_CAR_SKINS for Player.User;
	
	ItemList_Begin();
	VehicleList["CanyonCar"] = ItemList_AddWithSkin("CanyonVehicle.Item.Gbx",PERSISTENT_NEM_CAR_SKINS["CanyonCar"]);
	VehicleList["StadiumCar"] = ItemList_AddWithSkin("StadiumVehicle.Item.Gbx",PERSISTENT_NEM_CAR_SKINS["StadiumCar"]);
	VehicleList["ValleyCar"] = ItemList_AddWithSkin("ValleyVehicle.Item.Gbx",PERSISTENT_NEM_CAR_SKINS["ValleyCar"]);
	VehicleList["LagoonCar"] = ItemList_AddWithSkin("LagoonVehicle.Item.Gbx",PERSISTENT_NEM_CAR_SKINS["LagoonCar"]);
	
	foreach(Car,NEM_CustomCars) {
		if(Car != "" && !VehicleList.existskey(Car)) VehicleList[Car] = ItemList_Add(Car);
	}
	
	ItemList_End();
	
	CutOffTimeLimit = -1;
	
	RequestLoadMap();
  wait(MapLoaded);
	
}

Boolean Start() {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	
	UiDisplayStuntsNames = True;
	
	UIManager.UIAll.OverlayHideChat = True;
  UIManager.UIAll.OverlayHidePosition = True;
  UIManager.UIAll.OverlayHideSpectatorControllers = True;
  UIManager.UIAll.OverlayHideBackground = True;
  UIManager.UIAll.OverlayHideCheckPointList = True;
  UIManager.UIAll.OverlayHideOpponentsInfo = True;
  UIManager.UIAll.OverlayHideRoundScores = True;
  UIManager.UIAll.OverlayHideEndMapLadderRecap = True;
  UIManager.UIAll.AltMenuNoDefaultScores = True;
  UIManager.UIAll.AltMenuNoCustomScores = True;

  UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
  UIManager.UIAll.SmallScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;

	RefreshPersonalRecords();
	
	Layers2::Create("Start","file://Media/Manialinks/Start.xml");
	Layers2::Attach("Start",Null);
	
	Layers2::Create("GameMenu","file://Media/Manialinks/GameMenuSolo.xml");
	Layers2::SetType("GameMenu", CUILayer::EUILayerType::InGameMenu);
	Layers2::SetAnimationTypeIn("GameMenu",CUILayer::EUILayerAnimation::ScaleSlow);
	Layers2::Attach("GameMenu",Null);
	
	Layers2::Create("Ingame","file://Media/Manialinks/Ingame.xml");
	Layers2::SetAnimationTypeIn("Ingame",CUILayer::EUILayerAnimation::UpSlow);
	
	Layers2::Create("Endscreen","file://Media/Manialinks/Endscreen.xml");
	Layers2::SetAnimationTypeIn("Endscreen",CUILayer::EUILayerAnimation::ScaleSlow);
	
	GhostList["CanyonCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"CanyonCar"^"2");
	GhostList["StadiumCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"StadiumCar"^"2");
	GhostList["ValleyCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"ValleyCar"^"2");
	GhostList["LagoonCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"LagoonCar"^"2");
	wait(!GhostList["CanyonCar"].IsProcessing);
	wait(!GhostList["StadiumCar"].IsProcessing);
	wait(!GhostList["ValleyCar"].IsProcessing);
	wait(!GhostList["LagoonCar"].IsProcessing);
	
	Zones = TextLib::Split("|",Player.User.ZonePath);
	
	declare netwrite Text Net_MapCar for UI;
	Net_MapCar = MapPlayerModelName;
	
	declare netwrite Text Net_Environment for UI;
	Net_Environment = Map.CollectionName;
	declare netwrite Text Net_Map for UI;
	Net_Map = Map.MapName;
	
	if(S_Car == "") {	
		
	}
	else {
		Vehicle = S_Car;
	}
	
	ResumeInfo = ["","","",""];

  return True;
}

Void Event(CTmModeEvent _Event) {
	declare UI <=> UIManager.GetUI(_Event.Player);

	switch(_Event.Type) {
		case CTmModeEvent::EType::StartLine: {
			
		}
		case CTmModeEvent::EType::WayPoint: {
			if(_Event.IsEndRace) {
				Ghost = ScoreMgr.Playground_GetPlayerGhost(_Event.Player);
				TM::EndRaceSequence_Add(_Event.Player, "");
				Finished = True;
			}
			else if(_Event.IsEndLap) {
				
			}
			else {
				
			}
		}
		case CTmModeEvent::EType::GiveUp: {
			
		}
	}
}

Void EventUI(CUIConfigEvent _Event) {
	switch(_Event.CustomEventType) {
		case "VIEW_GHOSTS": {		
			declare netwrite Integer Net_NEM_Start for _Event.UI;
			declare netwrite Text[] Net_NEM_GhostCars for _Event.UI;
			declare netwrite Integer[] Net_NEM_GhostTimes for _Event.UI;
			declare netwrite Integer[][] Net_NEM_GhostCheckpoints for _Event.UI;
			
			Net_NEM_Start = 0;
			Net_NEM_GhostCars.clear();
			Net_NEM_GhostTimes.clear();
			Net_NEM_GhostCheckpoints.clear();
		
			if(GhostList["CanyonCar"].Ghost != Null) {
				RaceGhost_Add(GhostList["CanyonCar"].Ghost, False);
				
				Net_NEM_GhostCars.add("CanyonCar");
				Net_NEM_GhostTimes.add(GhostList["CanyonCar"].Ghost.Result.Time);
				
				declare Integer[] CheckpointArray;
				for(i,0,GhostList["CanyonCar"].Ghost.Result.Checkpoints.count-1)
					CheckpointArray.add(GhostList["CanyonCar"].Ghost.Result.Checkpoints[i]);
				Net_NEM_GhostCheckpoints.add(CheckpointArray);
			}
			if(GhostList["StadiumCar"].Ghost != Null) {
				RaceGhost_Add(GhostList["StadiumCar"].Ghost, False);
				
				Net_NEM_GhostCars.add("StadiumCar");
				Net_NEM_GhostTimes.add(GhostList["StadiumCar"].Ghost.Result.Time);
				
				declare Integer[] CheckpointArray;
				for(i,0,GhostList["StadiumCar"].Ghost.Result.Checkpoints.count-1)
					CheckpointArray.add(GhostList["StadiumCar"].Ghost.Result.Checkpoints[i]);
				Net_NEM_GhostCheckpoints.add(CheckpointArray);
			}
			if(GhostList["ValleyCar"].Ghost != Null) {
				RaceGhost_Add(GhostList["ValleyCar"].Ghost, False);
				
				Net_NEM_GhostCars.add("ValleyCar");
				Net_NEM_GhostTimes.add(GhostList["ValleyCar"].Ghost.Result.Time);
				
				declare Integer[] CheckpointArray;
				for(i,0,GhostList["ValleyCar"].Ghost.Result.Checkpoints.count-1)
					CheckpointArray.add(GhostList["ValleyCar"].Ghost.Result.Checkpoints[i]);
				Net_NEM_GhostCheckpoints.add(CheckpointArray);
			}
			if(GhostList["LagoonCar"].Ghost != Null) {
				RaceGhost_Add(GhostList["LagoonCar"].Ghost, False);
				
				Net_NEM_GhostCars.add("LagoonCar");
				Net_NEM_GhostTimes.add(GhostList["LagoonCar"].Ghost.Result.Time);
				
				declare Integer[] CheckpointArray;
				for(i,0,GhostList["LagoonCar"].Ghost.Result.Checkpoints.count-1)
					CheckpointArray.add(GhostList["LagoonCar"].Ghost.Result.Checkpoints[i]);
				Net_NEM_GhostCheckpoints.add(CheckpointArray);
			}
		}
	}
}

Void ScoreRequestEvent() {
	if(SetRecordRequest != Null) {
		if(!SetRecordRequest.IsProcessing) {
			if(SetRecordRequest.HasSucceeded) {
				log("SetRecord succeeded");	
				log(ScoreMgr.Map_GetSkillPoints(Players[0].Id, Map.MapInfo.MapUid, Vehicle^"2"));
			}
			else if(SetRecordRequest.HasFailed) {
				log("SetRecord failed");
			}
			
			ScoreMgr.TaskResult_Release(SetRecordRequest.Id);
			SetRecordRequest = Null;
		}
	}
}

Void Loop() {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	
	if(Player.RaceStartTime == 0 && Finished) {
		Player.Score.PrevRace = Ghost.Result;
		log(Ghost.Result.Time);
		
		declare netwrite Integer Net_Record for UI;
		Net_Record = Ghost.Result.Time;
		
		declare netwrite Text Net_Type for UI;
				
		if(Player.Score.BestRace.Time == -1) {
			log("First finish");
			SetRecordRequest = ScoreMgr.Map_SetNewRecord(Player.Id, Map.MapInfo.MapUid, Vehicle^"2", Ghost);
			wait(!SetRecordRequest.IsProcessing);
			if(SetRecordRequest.HasSucceeded) {
				Player.Score.BestRace = Ghost.Result;
				Net_Type = "FIRST_FINISH";
			}
		}
		else if(Ghost.Result.Time < Player.Score.BestRace.Time) {
			SetRecordRequest = ScoreMgr.Map_SetNewRecord(Player.Id, Map.MapInfo.MapUid, Vehicle^"2", Ghost);
			wait(!SetRecordRequest.IsProcessing);
			if(SetRecordRequest.HasSucceeded) {
				Player.Score.BestRace = Ghost.Result;
				Net_Type = "PERSONAL_BEST";
			}
		}
		else if(Ghost.Result.Time == Player.Score.BestRace.Time) {
			Net_Type = "EQUAL";
		}
		else {
			Net_Type = "WORSE";
		}
	
		declare netwrite Integer Net_NEM_Validation for UI;
		Net_NEM_Validation = 0;
		
		declare netwrite Integer Net_NEM_Skillpoints for UI;
		Net_NEM_Skillpoints = ScoreMgr.Map_GetSkillPoints(NullId, Map.MapInfo.MapUid, Vehicle^"2");
		
		if(Zones.count > 0) {
			declare netwrite Integer Net_NEM_FirstFinish_PlayerCount for UI;
			Net_NEM_FirstFinish_PlayerCount = ScoreMgr.MapLeaderBoard_GetPlayerCount(Map.MapInfo.MapUid, Vehicle^"2", "World");
			
			declare MapRequest = Http.CreateGet("http://trackmania.bigbang1112.eu/nadeoenvimix/api/map_info.php?uid=" ^ Map.MapInfo.MapUid);
			wait(MapRequest.IsCompleted);
			if(MapRequest.StatusCode == 200) {
				declare Doc = Xml.Create(MapRequest.Result);
				if(Doc.GetFirstChild("MAP_INFO").GetFirstChild(Vehicle).GetAttributeText("Validator", "") == "") {
					if(ScoreMgr.MapLeaderBoard_GetPlayerCount(Map.MapInfo.MapUid, Vehicle^"2", "World") == 0)
						Net_NEM_Validation = 1;
				}
			}
			else if(MapRequest.StatusCode != 403) {
				Net_NEM_Validation = -1;
			}
			Http.Destroy(MapRequest);
		}
		
		RefreshPersonalRecords();
		RefreshPersonalGhosts();
		
		Layers2::Attach("Endscreen",Player);
		Layers2::SetVisibility("GameMenu",False);
		declare netread Boolean Net_NEM_Continue for UI;
		
		wait(Net_NEM_Continue);
		Layers2::Detach("Endscreen",Player);
		Layers2::SetVisibility("GameMenu",True);
		Solo_SetNewRecord(Player.Score, CMode::EMedal::None);
		wait(!Solo_NewRecordSequenceInProgress);
		Finished = False;
	}
	
	declare netread Text[] Net_NEM_ResumeInfo for UI;
	
	if(Net_NEM_ResumeInfo.count == 5)
	if(ResumeInfo[0] != Net_NEM_ResumeInfo[0]
	|| ResumeInfo[1] != Net_NEM_ResumeInfo[1]
	|| ResumeInfo[2] != Net_NEM_ResumeInfo[2]
	|| ResumeInfo[3] != Net_NEM_ResumeInfo[3]
	|| ResumeInfo[4] != Net_NEM_ResumeInfo[4]) {
		Layers2::Detach("Ingame",Player);
		ResumeInfo = Net_NEM_ResumeInfo;
		UnspawnPlayer(Player);
		if(ResumeInfo[0] != "") {
			wait(PlayersWaiting.existskey(0));
			SpawnPlayer(Player);
		}
	}
	
	if(ResumeInfo[0] != "" && !Finished) {
		if(PlayersWaiting.existskey(0)) {
			Player.IsSpawned = True;
			Player.RaceStartTime = Now+2500;
			
			declare netwrite Integer Net_NEM_Start for UI;
			Net_NEM_Start = Player.RaceStartTime;
		}
	}
	
	TM::EndRaceSequence_Update();
}

main() {
    Init();
	Start();
	
	while(!ServerShutdownRequested && !Terminate) {
		ScoreRequestEvent();
		
		foreach(Event, PendingEvents) {
			Event(Event);
		}
		
		foreach(Event,UIManager.PendingEvents) {
			EventUI(Event);
		}
	
		Loop();

		yield;
	}

    UIManager.ResetAll();
}
