#RequireContext CTmMode

#Include "MathLib" as MathLib
#Include "TextLib" as TextLib
#Include "TimeLib" as TimeLib

#Include "Libs/Nadeo/Layers2.Script.txt" as Layers2

declare Ident[Text] VehicleList;
declare CTaskResult_Ghost[Text] GhostList;
declare Boolean Terminate;

declare Text Vehicle;

declare CTaskResult SetRecordRequest;

declare Text LastState;

Void RefreshPersonalGhosts() {
	GhostList["CanyonCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"CanyonCar");
	GhostList["StadiumCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"StadiumCar");
	GhostList["ValleyCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"ValleyCar");
	GhostList["LagoonCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"LagoonCar");
	wait(!GhostList["CanyonCar"].IsProcessing);
	wait(!GhostList["StadiumCar"].IsProcessing);
	wait(!GhostList["ValleyCar"].IsProcessing);
	wait(!GhostList["LagoonCar"].IsProcessing);
}

Void RefreshPersonalRecords() {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	
	declare netwrite Integer[] Net_Records for UI;
	Net_Records.add(ScoreMgr.Map_GetRecord(Player.Id, Map.MapInfo.MapUid, "CanyonCar"));
	Net_Records.add(ScoreMgr.Map_GetRecord(Player.Id, Map.MapInfo.MapUid, "StadiumCar"));
	Net_Records.add(ScoreMgr.Map_GetRecord(Player.Id, Map.MapInfo.MapUid, "ValleyCar"));
	Net_Records.add(ScoreMgr.Map_GetRecord(Player.Id, Map.MapInfo.MapUid, "LagoonCar"));
}

Void Init() {
	wait(Players.count>0);
	
	declare Player <=> Players[0];

	declare persistent Text[] NEM_CustomCars for Player.User;

	ItemList_Begin();
	VehicleList["CanyonCar"] = ItemList_AddWithSkin("CanyonVehicle.Item.Gbx","Profile");
	VehicleList["StadiumCar"] = ItemList_AddWithSkin("StadiumVehicle.Item.Gbx","Profile");
	VehicleList["ValleyCar"] = ItemList_AddWithSkin("ValleyVehicle.Item.Gbx","Profile");
	VehicleList["LagoonCar"] = ItemList_AddWithSkin("LagoonVehicle.Item.Gbx","Profile");
	
	foreach(Car,NEM_CustomCars) {
		if(Car != "" && !VehicleList.existskey(Car)) VehicleList[Car] = ItemList_Add(Car);
	}
	
	ItemList_End();
	
	RequestLoadMap();
    wait(MapLoaded);

	RefreshPersonalRecords();
	
	declare CHttpRequest ManialinkRequest = Http.CreateGet("file://Media/Manialinks/Selection.xml");
	wait(ManialinkRequest.IsCompleted);
	Layers2::Create("VehicleSelection",ManialinkRequest.Result);
	ManialinkRequest = Http.CreateGet("file://Media/Manialinks/Ingame.xml");
	wait(ManialinkRequest.IsCompleted);
	Layers2::Create("Ingame",ManialinkRequest.Result);
	ManialinkRequest = Http.CreateGet("file://Media/Manialinks/Endscreen.xml");
	wait(ManialinkRequest.IsCompleted);
	Layers2::Create("Endscreen",ManialinkRequest.Result);
	Http.Destroy(ManialinkRequest);
	
	UIManager.UIAll.OverlayHideChat = True;
    UIManager.UIAll.OverlayHidePosition = True;
    UIManager.UIAll.OverlayHideSpectatorControllers = True;
    UIManager.UIAll.OverlayHideBackground = True;
    UIManager.UIAll.OverlayHideCheckPointList = True;
    UIManager.UIAll.OverlayHideOpponentsInfo = True;
    UIManager.UIAll.OverlayHideRoundScores = True;
    UIManager.UIAll.OverlayHideEndMapLadderRecap = True;
    UIManager.UIAll.AltMenuNoDefaultScores = True;
    UIManager.UIAll.AltMenuNoCustomScores = True;
    //UIManager.UIAll.OverlayHidePersonnalBestAndRank = True;

    UIManager.UIAll.ScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
    UIManager.UIAll.SmallScoreTableVisibility = CUIConfig::EVisibility::ForcedHidden;
	
	GhostList["CanyonCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"CanyonCar");
	GhostList["StadiumCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"StadiumCar");
	GhostList["ValleyCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"ValleyCar");
	GhostList["LagoonCar"] = ScoreMgr.Map_GetRecordGhost(Players[0].Id,Map.MapInfo.MapUid,"LagoonCar");
	wait(!GhostList["CanyonCar"].IsProcessing);
	wait(!GhostList["StadiumCar"].IsProcessing);
	wait(!GhostList["ValleyCar"].IsProcessing);
	wait(!GhostList["LagoonCar"].IsProcessing);
}

Boolean Start() {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	
	declare netwrite Text Net_MapCar for UI;
	Net_MapCar = MapPlayerModelName;
	
	declare netwrite Text Net_Environment for UI;
	Net_Environment = "STADIUM";
	declare netwrite Text Net_Map for UI;
	Net_Map = Map.MapName;
	
	Layers2::Attach("VehicleSelection",Player);
	
	UI.UISequence = CUIConfig::EUISequence::Outro;

  return True;
}

Void Event(CTmModeEvent _Event) {
	declare UI <=> UIManager.GetUI(_Event.Player);

	switch(_Event.Type) {
		case CTmModeEvent::EType::WayPoint: {
			if(_Event.IsEndRace) {							
				UIManager.UIAll.OverlayHideCheckPointTime = True;
				
				declare Ghost = ScoreMgr.Playground_GetPlayerGhost(_Event.Player);
				
				_Event.Player.Score.PrevRace = Ghost.Result;
				
				declare netwrite Text Net_Type for UI;		
				
				if(ScoreMgr.MapLeaderBoard_GetPlayerCount(Map.MapInfo.MapUid, Vehicle, "World") == 0) {
					log("New Validator!");
				}
				
				if(_Event.Player.Score.BestRace.Time == -1) {
					log("First finish");
					SetRecordRequest = ScoreMgr.Map_SetNewRecord(_Event.Player.Id, Map.MapInfo.MapUid, Vehicle, Ghost);
					Net_Type = "FIRST_FINISH";
				}
				else if(Ghost.Result.Time < _Event.Player.Score.BestRace.Time) {
					log("Improvement");
					SetRecordRequest = ScoreMgr.Map_SetNewRecord(_Event.Player.Id, Map.MapInfo.MapUid, Vehicle, Ghost);
					Net_Type = "PERSONAL_BEST";
				}
				else if(Ghost.Result.Time == _Event.Player.Score.BestRace.Time) {
					log("Equal");
					Net_Type = "EQUAL";
				}
				else {
					log("Worse run");
					Net_Type = "WORSE";
				}
	
				declare netwrite Integer Net_Record for UI;
				Net_Record = Ghost.Result.Time;

				RefreshPersonalRecords();
			}
			else if(_Event.IsEndLap) {
				
			}
			else {
				
			}
		}
		case CTmModeEvent::EType::GiveUp: {
			
		}
	}
}

Void ScoreRequestEvent() {
	if(SetRecordRequest != Null) {
		if(!SetRecordRequest.IsProcessing) {
			if(SetRecordRequest.HasSucceeded) {
				log("SetRecord succeeded");	
				log(ScoreMgr.Map_GetSkillPoints(AllPlayers[0].Id, Map.MapInfo.MapUid, Vehicle));
				
				declare netwrite Boolean Net_WorldRecord for UIManager.GetUI(AllPlayers[0]) = True;
			}
			else if(SetRecordRequest.HasFailed) {
				log("SetRecord failed");
			}
			
			ScoreMgr.TaskResult_Release(SetRecordRequest.Id);
			SetRecordRequest = Null;
		}
	}
}

Void SpawnPlayer(CTmPlayer _Player) {
	declare UI <=> UIManager.GetUI(_Player);

	declare netread Text Net_Vehicle for UI;
	Vehicle = Net_Vehicle;
	_Player.ForceModelId = VehicleList[Vehicle];
	if(_Player.ForceModelId == VehicleList[MapPlayerModelName]) Terminate = True;
				
	RaceGhost_RemoveAll();
	RefreshPersonalGhosts();
	
	if(GhostList["CanyonCar"].Ghost != Null) {
		RaceGhost_Add(GhostList["CanyonCar"].Ghost, False);
	}
	if(GhostList["StadiumCar"].Ghost != Null) {
		RaceGhost_Add(GhostList["StadiumCar"].Ghost, False);
	}
	if(GhostList["ValleyCar"].Ghost != Null) {
		RaceGhost_Add(GhostList["ValleyCar"].Ghost, False);
	}
	if(GhostList["LagoonCar"].Ghost != Null) {
		RaceGhost_Add(GhostList["LagoonCar"].Ghost, False);
	}
	
	if(GhostList[Vehicle].Ghost != Null) {
		_Player.Score.BestRace = GhostList[Vehicle].Ghost.Result;
	}
	
	_Player.IsSpawned = True;
	_Player.RaceStartTime = Now + 2500;
	
	UIManager.UIAll.OverlayHideCheckPointTime = False;
	
	declare netwrite Text Net_Car for UI = Vehicle;

	Layers2::Detach("VehicleSelection",_Player);
	Layers2::Detach("Endscreen",_Player);
	Layers2::Attach("Ingame",_Player);
	
	UI.UISequence = CUIConfig::EUISequence::None;
}

Void Loop() {
	declare Player <=> Players[0];
	declare UI <=> UIManager.GetUI(Player);
	
	declare netread Text Net_State for UI;
	
	if(Net_State != LastState) {
		switch(Net_State) {
			case "START": {
				UnspawnPlayer(Player);
			}
			case "FINISH": {
				Layers2::Detach("Ingame",Player);
				Layers2::Attach("Endscreen",Player);
			}
			case "SPECTATE": {
				Layers2::Detach("VehicleSelection",Player);
				Layers2::Attach("Ingame",Player);
				UI.UISequence = CUIConfig::EUISequence::None;
			}
			case "MENU": {
				if(PlayersRacing.existskey(0))
					UnspawnPlayer(Player);
					
				Layers2::Detach("Ingame",Player);
				Layers2::Attach("VehicleSelection",Player);
				UI.UISequence = CUIConfig::EUISequence::Outro;
			}
			case "BACK": {
				Player.IsSpawned = False;
				
				Terminate = True;
			}
		}
		log(Net_State);
		LastState = Net_State;
	}
	
	if(Net_State == "START") {
		if(PlayersWaiting.existskey(0))
			SpawnPlayer(Player);
	}
}

main() {
    Init();
	Start();
	
	while(!ServerShutdownRequested && !Terminate) {
		Loop();
		
		ScoreRequestEvent();
		
		foreach(Event, PendingEvents) {
			Event(Event);
		}

		yield;
	}

    UIManager.ResetAll();
}
